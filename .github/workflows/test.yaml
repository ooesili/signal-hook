name: test

on:
  push:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  test:
    name: Build & test
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust:
          - stable
          - beta
          - nightly
          - 1.36.0

    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          default: true
          profile: minimal

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Build & test
        env:
          RUST_VERSION: ${{ matrix.rust }}
          OS: ${{ matrix.os }}
        run: ./ci-check.sh

  rustfmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          components: rustfmt

      - run: cargo fmt --all -- --check

  links:
    name: Check documentation links
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Install cargo-deadlinks
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-deadlinks
          use-tool-cache: true

      - name: Check links
        run: |
          for package in $(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | .name'); do
            cargo rustdoc -p "$package" --all-features -- -D warnings
            dname=$(echo "$package" | tr '-' '_')
            cargo deadlinks --dir "target/doc/$dname" --check-http --ignore-fragments
          done

  ancient-registry:
    name: Check compilation of signal-hook-registry on 1.26.0
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.26.0
          default: true
          profile: minimal

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Check compilation
        run: |
          rm Cargo.toml
          cd signal-hook-registry
          sed -i -e '/signal-hook =/d' Cargo.toml
          cargo check

  ancient:
    name: Check compilation on 1.31.0
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.31.0
          default: true
          profile: minimal

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Check compilation
        run: |
          rm Cargo.lock
          cargo check --no-default-features


  clippy:
    name: Clippy lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
          components: clippy

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Run clippy linter
        run: cargo clippy --all --tests -- -D clippy::all -D warnings

  # There's bunch of platforms that have some weird quirks (or we don't know
  # that they don't). While fully compiling and testing on them is a bit of a
  # challenge, running cargo check on them should be easy enough and should
  # catch at least some problems (like different sizes of types).
  weird_platforms:
    name: Check weird platforms
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - x86_64-sun-solaris
          - x86_64-linux-android
          - x86_64-apple-ios
          - x86_64-apple-darwin
          - aarch64-linux-android
          - arm-linux-androideabi
          - mips-unknown-linux-musl
          - x86_64-unknown-netbsd
          - x86_64-unknown-freebsd

    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
          target: ${{ matrix.target }}

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Run the check
        run: cargo check --all --all-features --tests --target=${{ matrix.target }}

  # Check some either weirder platforms, but these support only the base crate,
  # not all the fancy async ones.
  weirder_platforms:
    name: Check even weirder platforms
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-fuchsia
          #- wasm32-wasi (not yet? Or not even?)
          - asmjs-unknown-emscripten
          # - x86_64-unknown-redox (Is that platform even usable on stable?)

    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
          target: ${{ matrix.target }}

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Run the check
        run: cargo check --tests --all-features --target=${{ matrix.target }}
